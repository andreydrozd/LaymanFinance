@model TransactionViewModel
@{
    ViewData["Title"] = "Inflows";
}

<div class="row">
    <h2>Gaze at your inflows.</h2>
    <div class="card">
        <div class="card-header">Filter by Category</div>
        <div class="card-body">
            <form>
                @foreach (string category in Model.Categories)
                {
                <input type="checkbox" value="@category" name="category" />@category
                }
                <input type="submit" />
            </form>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-2">
        <h5>Date</h5>
    </div>
    <div class="col-2">
        <h5><a asp-route-sort="amount">Amount</a></h5>
    </div>
    <div class="col-2">
        <h5><a asp-route-sort="source">Source</a></h5>
    </div>
    <div class="col-2">
        <h5>Memo</h5>
    </div>
    <div class="col-2">
        <h5>Category</h5>
    </div>
</div>

@foreach (var inflow in Model.Transactions)
{
    <div class="row">
        <div class="col-2">
            <p>@inflow.DateOccurred.ToShortDateString()</p>
        </div>
        <div class="col-2">
            <p>@inflow.Amount.ToString("c")</p>
            @*
                This is done when the model property is nullable.
                <p>@(Model.Amount.HasValue ? @Model.Amount.Value.ToString("c") : "No Value")</p>
            *@
        </div>
        <div class="col-2">
            <p>@inflow.Source</p>
        </div>
        <div class="col-2">
            <p>@inflow.Memo</p>
        </div>
        <div class="col-2">
            <p>@inflow.Category.Name</p>
        </div>
        <div class="col-2">
            <a asp-action="Edit" asp-route-id="@inflow.Id">Edit</a> |
            <a asp-action="Delete" asp-route-id="@inflow.Id">Delete</a>
        </div>
    </div>
}

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.0/chartist.min.js"></script>
    <script type="text/javascript">
        var outlayAllocation = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Transactions.GroupBy(x => x.Category.Name).Select(x => new { Category = x.Key, Amount = x.Sum(y => y.Amount) })))');


    </script>
}


