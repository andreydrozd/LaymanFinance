@model IEnumerable<Transaction>
@{
    ViewData["Title"] = "Outlays";
}

<h2>Gaze at your outlays.</h2>

<div class="row">
    <div class="col-2">
        <h5>Date</h5>
    </div>
    <div class="col-2">
        <h5><a asp-route-sort="amount">Amount</a></h5>
    </div>
    <div class="col-2">
        <h5><a asp-route-sort="source">Source</a></h5>
    </div>
    <div class="col-2">
        <h5>Memo</h5>
    </div>
    <div class="col-2">
        <h5>Category</h5>
    </div>
</div>

@foreach (var outlay in Model)
{
    <div class="row">
        <div class="col-2">
            <p>@outlay.DateOccurred.ToShortDateString()</p>
        </div>
        <div class="col-2">
            <p>@outlay.Amount.ToString("c")</p>
            @*
                This is done when the model property is nullable.
                <p>@(Model.Amount.HasValue ? @Model.Amount.Value.ToString("c") : "No Value")</p>
            *@
        </div>
        <div class="col-2">
            <p>@outlay.Source</p>
        </div>
        <div class="col-2">
            <p>@outlay.Memo</p>
        </div>
        <div class="col-2">
            <p>@outlay.Category.Name</p>
        </div>
        <div class="col-2">
            <a asp-action="Edit" asp-route-id="@outlay.Id">Edit</a> |
            <a asp-action="Delete" asp-route-id="@outlay.Id">Delete</a>
        </div>
    </div>
}

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.0/chartist.min.js"></script>
    <script type="text/javascript">
        var outlayAllocation = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.GroupBy(x => x.Category.Name).Select(x => new { Category = x.Key, Amount = x.Sum(y => y.Amount) })))');
        


    </script>
}