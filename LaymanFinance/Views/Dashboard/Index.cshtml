@model TransactionViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid">
    <div class="row">
        <!--Inputs for which month's transactions you want to see. Goes 6 months back.-->
        <div>
            @for (int i = 0; i > -6; i--)
            {
                <a asp-route-month="@DateTime.Now.AddMonths(i).Month" asp-route-year="@DateTime.Now.AddMonths(i).Year">@DateTime.Now.AddMonths(i).ToString("MMM-yy")</a>
            }
        </div>
    </div>
    <div class="row">
        <div class="row">
            <div class="col-2">
                <h4>Date</h4>
            </div>
            <div class="col-2">
                <h4><a asp-route-sort="amount">Amount</a></h4>
            </div>
            <div class="col-2">
                <h4><a asp-route-sort="source">Source</a></h4>
            </div>
            <div class="col-2">
                <h4>Memo</h4>
            </div>
            <div class="col-2">
                <h4>Category</h4>
            </div>
        </div>
        @foreach (var transaction in Model.Transactions)
        {
            <div class="row">
                <div class="col-2">
                    <p>@transaction.DateOccurred.ToShortDateString()</p>
                </div>
                <div class="col-2">
                    <p>@transaction.Amount.ToString("c")</p>
                    @*
                        This is done when the model property is nullable.
                        <p>@(Model.Amount.HasValue ? @Model.Amount.Value.ToString("c") : "No Value")</p>
                    *@
                </div>
                <div class="col-2">
                    <p>@transaction.Source</p>
                </div>
                <div class="col-2">
                    <p>@transaction.Memo</p>
                </div>
                <div class="col-2">
                    <p>@transaction.Category.Name</p>
                </div>
                <div class="col-2">
                    <a asp-action="Edit" asp-route-id="@transaction.Id">Edit</a> |
                    <a asp-action="Delete" asp-route-id="@transaction">Delete</a>
                </div>
            </div>
        }
    </div>
    <div class="row chart-container">
        <div class="col-6"><canvas id="barChart" width="400" height="400"></canvas></div>
        <div class="col-6"><canvas id="otherBarChart" width="400" height="400"></canvas></div>
    </div>

</div>

@section Scripts{
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script type="text/javascript">

    // For pie chart of actual outlays
    var outlayTotals = @Html.Raw(Model.OutlayTotals);
    var outlayTotalsCount = outlayTotals.length;

    // For bar graph of acutal 

    // For pie chart of actual inflows
    var inflowTotals = @Html.Raw(Model.InflowTotals);
    var inflowTotalsCount = inflowTotals.length;

    // Charts
    var ctx = document.getElementById("barChart");
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: outlayTotals.map((x) => x.Category),
            datasets: [{
                label: 'How the pie actually looks for this period',
                data: outlayTotals.map((x) => x.Amount),
                backgroundColor: outlayTotals.map((item, index) => {
                        var hue = 360 * ((index) / outlayTotalsCount);
                        return 'hsla(' + hue + ', 70%, 70%, 0.4)'
                    })
                ,
                borderColor: outlayTotals.map((item, index) => {
                        var hue = 360 * ((index) / outlayTotalsCount);
                        return 'hsla(' + hue + ', 50%, 50%, 0.4)'
                    })
                ,
                borderWidth: 5
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });

    var ctx = document.getElementById("otherBarChart");
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: inflowTotals.map((x) => x.Category),
            datasets: [{
                label: 'How the pie should look for this period',
                data: inflowTotals.map((x) => x.Amount),
                backgroundColor: inflowTotals.map((item, index) => {
                    var hue = 360 * ((index) / inflowTotalsCount);
                    return 'hsla(' + hue + ', 70%, 70%, 0.4)'
                })
                ,
                borderColor: inflowTotals.map((item, index) => {
                    var hue = 360 * ((index) / inflowTotalsCount);
                    return 'hsla(' + hue + ', 50%, 50%, 0.4)'
                })
                ,
                borderWidth: 5
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });

    


</script>
}
