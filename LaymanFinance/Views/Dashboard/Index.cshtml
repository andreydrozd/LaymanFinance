@model TransactionViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid">
    <h1 class="display-4">
        Transactions for @ViewData["Month"] @ViewData["Year"]
    </h1>

    <!--Inputs for which month's transactions you want to see. Goes 6 months back.-->
    <div class="dropdown dropright">
        <a class="btn btn-secondary btn-lg dropdown-toggle" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="color: white">
            @ViewData["Month"] @ViewData["Year"]
        </a>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
            @for (int i = 0; i > -6; i--)
            {
                <a asp-route-month="@DateTime.Now.AddMonths(i).Month" asp-route-year="@DateTime.Now.AddMonths(i).Year" class="dropdown-item">@DateTime.Now.AddMonths(i).ToString("MMM-yy")</a>
            }
        </div>
    </div>

    <table class="table table-hover table-sm">
        <thead class="thead-light">
            <tr>
                <th>
                    <h4>Date</h4>
                </th>
                <th>
                    <h4>Amount</h4>
                </th>
                <th>
                    <h4>Source</h4>
                </th>
                <th>
                    <h4>Memo</h4>
                </th>
                <th>
                    <h4>Category</h4>
                </th>
                <th>
                    <h4>Modify</h4>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in Model.Transactions)
            {
                <tr>
                    <td>
                        @transaction.DateOccurred.ToShortDateString()
                    </td>
                    <td>
                        @transaction.Amount.ToString("c")
                        @*
                            This is done when the model property is nullable.
                            <p>@(Model.Amount.HasValue ? @Model.Amount.Value.ToString("c") : "No Value")</p>
                        *@
                    </td>
                    <td>
                        @transaction.Source
                    </td>
                    <td>
                        @transaction.Memo
                    </td>
                    <td>
                        @transaction.Category.Name
                    </td>
                    <td>
                        <a asp-controller="Transactions" asp-action="Edit" asp-route-id="@transaction.Id">Edit</a> |
                        <a asp-controller="Transactions" asp-action="Delete" asp-route-id="@transaction.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <hr />
    <div class="row chart-container">
        <div class="col-6">
            <h3 class="chart-headers">Acutal Outlays: @Model.AcutalOutlays.ToString("c")</h3>
            <hr />
            <canvas id="pieChartActuals" width="400" height="400"></canvas>
        </div>
        <div class="col-6">
            <h3 class="chart-headers">Budgeted Outlays: @Model.BudgetOutlays.ToString("c")</h3>
            <hr />
            <canvas id="pieChartBudget" width="400" height="400"></canvas>
        </div>
    </div>

</div>

@section Scripts{
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script type="text/javascript">

    // For pie chart of budgeted outlays
    var outlayTotalsBudget = @Html.Raw(Model.OutlayTotalsBudget);

    // For pie chart of actual outlays
    var outlayTotals = @Html.Raw(Model.OutlayTotals);
    // Inserts Categories with a $0 that haven't been applied on the current month
    for (var i = 0; i < outlayTotalsBudget.length; i++) {
        if (outlayTotals[i] == undefined) {
            var addFromBudget = { "Category": outlayTotalsBudget[i].Category, "Amount": 0 };
            outlayTotals.push(addFromBudget)
        }
        if (outlayTotals[i].Category != outlayTotalsBudget[i].Category) {
            var addObject = { "Category": outlayTotalsBudget[i].Category, "Amount": 0 };
            outlayTotals.splice(i, 0, addObject);
        }
    }

    // For dividing up the pie consistently, since some months don't have all of the categories in transactions.
    var pieDivider = outlayTotalsBudget.length;


    // For bar graph of last six months of spending.

    // Actualy spending pie chart
    var ctx = document.getElementById("pieChartActuals");
    var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: outlayTotals.map((x) => x.Category),
            datasets: [{
                label: 'How the pie actually looks for this period',
                data: outlayTotals.map((x) => x.Amount),
                backgroundColor: outlayTotals.map((item, index) => {
                        var hue = 360 * ((index) / pieDivider);
                        return 'hsla(' + hue + ', 70%, 70%, 0.4)'
                    })
                ,
                borderColor: outlayTotals.map((item, index) => {
                        var hue = 360 * ((index) / pieDivider);
                        return 'hsla(' + hue + ', 50%, 50%, 0.4)'
                    })
                ,
                borderWidth: 5
            }]
        },
        options: {
        }
    });

    // Budget pie chart
    var ctx = document.getElementById("pieChartBudget");
    var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: outlayTotalsBudget.map((x) => x.Category),
            datasets: [{
                label: 'How the pie should look for this period',
                data: outlayTotalsBudget.map((x) => x.Amount),
                backgroundColor: outlayTotalsBudget.map((item, index) => {
                    var hue = 360 * ((index) / pieDivider);
                    return 'hsla(' + hue + ', 70%, 70%, 0.4)'
                })
                ,
                borderColor: outlayTotalsBudget.map((item, index) => {
                    var hue = 360 * ((index) / pieDivider);
                    return 'hsla(' + hue + ', 50%, 50%, 0.4)'
                })
                ,
                borderWidth: 5
            }]
        },
        options: {
        }
    });
</script>
}
